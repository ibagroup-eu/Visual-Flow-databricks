#
# Copyright (c) 2021 IBA Group, a.s. All rights reserved.
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Regardless of where you would run Visual Flow, it's backend API requires a correct application.yaml
# The purpose of this file is to serve as a guide to structure your own application.yaml
# Some of these fields have default values assigned to them, that can be changed, others are empty and must be filled in

server:
  ssl:
    key-store: ./tls.p12                          # path to p12 store file
    key-store-password: ${KEYSTORE_PASS}          # password for p12 store file
    key-store-type: pkcs12                        # store type
    key-alias: vf-key                             # name of key in p12 store file
    key-password: ${KEYSTORE_PASS}                # password for key in p12 store file
  port: 8080
  tomcat:
    accesslog:
      enabled: true
  servlet:
    context-path: ${BASE_PATH}
  error:
    include-message: always
    include-binding-errors: always

oauth:
  url:
    userInfo: ${USERINFO_ENDPOINT}                # URL pointing to userInfo endpoint on oauth server (for ex. Github: https://api.github.com/user, Keycloak: {ADDRESS}/auth/realms/{REALM}/protocol/openid-connect/userinfo)
  provider: github                                # OAuth provider (it is used only in error messages).

auth:
  id:                                             # user id key in returned userinfo object (for ex. Github: id, Keycloak: sub)
  username:                                       # username key in returned userinfo object - supposed to be unique (for ex. Github: username, Keycloak: preferred_username)
  name:                                           # user's full name key in returned userinfo object (for ex. Github: name, Keycloak: name)
  email:                                          # email address key in returned userinfo object (for ex. Github: email, Keycloak: email)

superusers:
  set:
    # yaml list of user names(refers to auth.username). Example:
    # - github-nickname1
    # - nickname2

namespace:
  label:                                          # value of "app" label in kubernetes resources generated by app
  app:                                            # namespace in Kubernetes where backend is deployed (or not deployed, but this namespace should contain job.imagePullSecret, job.spark.serviceAccount, job.spark.roleBinding and will contain service account of users logged to app)
  prefix: ${namespace.app}-                       # prefix for names of new namespaces created by app (app projects)

databricks:
  transformations:
    path: dbfs:/FileStore/tables/spark-transformations/spark_transformations_0_1_jar_with_dependencies.jar
  isv:
    name: visual-flow
    version: 0.1
  retry:
    codes: 429, 500, 503                          # list of http errors codes for retrying

jobStorage:
  host: https://localhost:8090                    # The connection host for job storage service

historyService:
  host: https://localhost:8099                    # The connection host for history service

spring:
  datasource:         # PostgreSQL DB Connection:
    url: jdbc:postgresql://okd4w1.okd.gomel.iba.by:31433/example    # ${URL}
    username: postgres        # ${USERNAME}
    password: postgrespass        # ${PASSWORD}
    driver-class-name: org.postgresql.Driver
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: never
    scheduler-name: "vf"
    properties:
      org:
        quartz:
          scheduler:
            instanceId: AUTO
          jobStore:
            driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate #We only make database-specific proxies for databases
            #            useProperties: true #Indicates that JDBC JobStore stores all values in JobDataMaps as strings, so more complex objects can be stored as name-value pairs rather than serialized in BLOB columns.In the long run, this is safer because you avoid serializing non-String classes to BLOB class versions.
            tablePrefix: QRTZ_  #Database Table Prefix
            clusterCheckinInterval: 5000 #Set the frequency (in milliseconds) of this instance'checkin'* with other instances of the cluster.Affects the speed of detecting failed instances.
            isClustered: true #Turn on Clustering
          threadPool: #Connection Pool
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 4
            threadsInheritContextClassLoaderOfInitializingThread: true